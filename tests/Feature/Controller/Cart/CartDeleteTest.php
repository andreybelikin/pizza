<?php

namespace Tests\Feature\Controller\Cart;

use Tests\TestCase;

class CartDeleteTest extends TestCase
{
    private const CONTROLLER_ROUTE = '/api/users/{userId}/carts';
    private const ADMIN_CONTROLLER_ROUTE = '/api/admin/users/{userId}/carts';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testDeleteCartByOwnerSuccess(): void
    {
        $user = $this->createUser();
        $this->createCartProducts($user);

        $response = $this->deleteJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            [],
            ['authorization' => 'Bearer ' . $this->getUserAccessToken($user)]
        );

        $response->assertOk();
        static::assertTrue($user->products()->get()->isEmpty());
    }

    public function testDeleteCartByAdminSuccess(): void
    {
        $user = $this->getAdminUser();
        $anotherUser = $this->createUser();
        $this->createCartProducts($anotherUser);

        $response = $this->deleteJson(
            str_replace('{userId}', $user->getKey(), self::ADMIN_CONTROLLER_ROUTE),
            [],
            ['authorization' => 'Bearer ' . $this->getUserAccessToken($user)]
        );

        $response->assertOk();
        static::assertTrue($user->products()->get()->isEmpty());
    }

    public function testDeleteCartWithInvalidTokenShouldFail(): void
    {
        $user = $this->createUser();
        $this->createCartProducts($user);

        $response = $this->deleteJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            [],
            ['authorization' => 'Bearer ' . $this->getInvalidToken()]
        );

        $response->assertUnauthorized();
    }

    public function testDeleteCartByAdminWithInvalidTokenShouldFail(): void
    {
        $user = $this->getAdminUser();
        $this->createCartProducts($user);

        $response = $this->deleteJson(
            str_replace('{userId}', $user->getKey(), self::ADMIN_CONTROLLER_ROUTE),
            [],
            ['authorization' => 'Bearer ' . $this->getInvalidToken()]
        );

        $response->assertUnauthorized();
    }

    public function testDeleteAnotherUserCartShouldFail(): void
    {
        $user = $this->createUser();
        $anotherUser = $this->createUser();
        $this->createCartProducts($anotherUser);

        $response = $this->deleteJson(
            str_replace('{userId}', $anotherUser->getKey(), self::CONTROLLER_ROUTE),
            [],
            ['authorization' => 'Bearer ' . $this->getUserAccessToken($user)]
        );

        $response->assertForbidden();
    }
}
