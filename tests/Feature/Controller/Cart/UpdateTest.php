<?php

namespace Tests\Feature\Controller\Cart;

use App\Enums\Limit\Cart\CartProductLimit;
use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Tests\Traits\CartTrait;
use Tests\Traits\UserTrait;
use Tests\Traits\AuthTrait;

class UpdateTest extends TestCase
{
    use DatabaseTransactions;
    use UserTrait;
    use AuthTrait;
    use CartTrait;

    private const CONTROLLER_ROUTE = '/api/users/{userId}/carts';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testUpdateCartByOwnerSuccess(): void
    {
        $user = $this->createUser();
        $this->createCartProducts($user);
        $updateRequest = $this->getCartUpdateRequest($user, 3);
        $expectedResponse = $this->getExpectedResponse($updateRequest);

        $response = $this->putJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            $updateRequest,
            ['authorization' => 'Bearer ' . $this->getAccessTokenFromUser($user)]
        );

        $response->assertOk();
        $response->assertJson($expectedResponse);
    }

    public function testGetCartByAdminSuccess(): void
    {
        $user = $this->getAdminUser();
        $this->createCartProducts($user);
        $anotherUser = $this->getAnotherUser();
        $updateRequest = $this->getCartUpdateRequest($anotherUser, 3);
        $expectedResponse = $this->getExpectedResponse($updateRequest);

        $response = $this->putJson(
            str_replace('{userId}', $anotherUser->getKey(), self::CONTROLLER_ROUTE),
            $updateRequest,
            ['authorization' => 'Bearer ' . $this->getAccessTokenFromUser($user)]
        );

        $response->assertOk();
        $response->assertJson($expectedResponse);
    }

    public function testGetProductWithInvalidTokenShouldFail(): void
    {
        $user = $this->getUser();
        $invalidToken = 'eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjEifQ.ZAU547bnCcGrvSZiaDeYpbQg6rUopOe3HMJ01l2a2NQ';

        $response = $this->getJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . $invalidToken]
        );

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Token Signature could not be verified.', $decodedResponse['message']);
    }

    public function testGetAnotherUserCartShouldFail(): void
    {
        $user = $this->getUser();
        $anotherUser = $this->getAnotherUser();

        $response = $this->getJson(
            str_replace('{userId}', $anotherUser->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . $this->getAccessTokenFromUser($user)]
        );

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Don\'t have permission to this resource', $decodedResponse['message']);
    }

    private function getCartUpdateRequest(User $user, int $newQuantity): array
    {
        $request = [];
        $cartProducts = $user->products()
            ->take(3)
            ->get()
            ->toArray();
        $newCartProduct = Product::query()
            ->first()
            ->whereIn('type', CartProductLimit::getTypes())
            ->whereNot(array_column($cartProducts, 'id'))
            ->get()
            ->toArray();
        $cartProducts = [...$cartProducts, ...$newCartProduct];

        foreach ($cartProducts as $product) {
            $request['products'][] = [
                'id' => $product['id'],
                'quantity' => $newQuantity,
            ];
        }

        return $request;
    }

    private function getExpectedResponse(array $cartUpdateRequest): array
    {
        $responseProducts = array_map(function ($requestProduct) {
            $product = Product::query()->find($requestProduct['id']);

            return [
                'id' => $requestProduct['id'],
                'quantity' => $requestProduct['quantity'],
                'title' => $product['title'],
                'price' => floor($product['price']),
                'totalPrice' => $product['price'] * $requestProduct['quantity'],
            ];
        }, $cartUpdateRequest['products']);

        return [
            'products' => $responseProducts,
            'totalSum' => array_sum(array_column($responseProducts, 'totalPrice')),
        ];
    }

}
