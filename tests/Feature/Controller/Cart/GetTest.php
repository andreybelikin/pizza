<?php

namespace Tests\Feature\Controller\Cart;

use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Tests\TestData\Tokens;

class GetTest extends TestCase
{
    use DatabaseTransactions;

    private const CONTROLLER_ROUTE = '/api/users/{userId}/carts';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetCartSuccess(): void
    {
        $user = User::first();
        $expectedCart = $this->getCart($user);
        $response = $this->getJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . Tokens::getAccessTokenFromUser($user)]
        );

        $response->assertOk();
        $response->assertJson($expectedCart);
    }
    public function testGetProductWithInvalidTokenShouldFail(): void
    {
        $invalidToken = 'eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjEifQ.ZAU547bnCcGrvSZiaDeYpbQg6rUopOe3HMJ01l2a2NQ';
        auth()->setToken($invalidToken);

        $this->getCart(true);

        $response = $this->getJson(
            self::CONTROLLER_ROUTE . '/' . rand(1000, 2000),
            ['authorization' => 'Bearer ' . auth()->getToken()]
        );

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Token Signature could not be verified.', $decodedResponse['message']);
    }

    private function getCart(User $user): array
    {
        $products = $user
            ->products()
            ->distinct()
            ->get();

        $cart['products'] = $products->map(function (Product $product) use ($user) {
            $productQuantity = $user
                ->products()
                ->where('products.id', $product->id)
                ->count();

            return [
                'id' => $product->id,
                'quantity' => $productQuantity,
                'title' => $product->title,
                'price' => $product->price,
                'totalPrice' => $product->price * $productQuantity,
            ];
        });
        $cart['totalSum'] = $cart['products']->sum('totalPrice');

        return $cart;
    }
}
