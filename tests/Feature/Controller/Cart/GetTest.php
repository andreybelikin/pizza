<?php

namespace Tests\Feature\Controller\Cart;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Tests\Traits\CartTrait;
use Tests\Traits\UserTrait;
use Tests\Traits\AuthTrait;

class GetTest extends TestCase
{
    use DatabaseTransactions;
    use UserTrait;
    use AuthTrait;
    use CartTrait;

    private const CONTROLLER_ROUTE = '/api/users/{userId}/carts';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetCartByOwnerSuccess(): void
    {
        $user = $this->getUser();
        $expectedCart = $this->getCart($user);
        $response = $this->getJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . $this->getAccessTokenFromUser($user)]
        );

        $response->assertOk();
        $response->assertJson($expectedCart);
    }

    public function testGetCartByAdminSuccess(): void
    {
        $user = $this->getAdminUser();
        $anotherUser = $this->getAnotherUser();
        $expectedCart = $this->getCart($anotherUser);

        $response = $this->getJson(
            str_replace('{userId}', $anotherUser->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . $this->getAccessTokenFromUser($user)]
        );

        $response->assertOk();
        $response->assertJson($expectedCart);
    }

    public function testGetProductWithInvalidTokenShouldFail(): void
    {
        $user = $this->getUser();
        $invalidToken = 'eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjEifQ.ZAU547bnCcGrvSZiaDeYpbQg6rUopOe3HMJ01l2a2NQ';

        $response = $this->getJson(
            str_replace('{userId}', $user->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . $invalidToken]
        );

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Token Signature could not be verified.', $decodedResponse['message']);
    }

    public function testGetAnotherUserCartShouldFail(): void
    {
        $user = $this->getUser();
        $anotherUser = $this->getAnotherUser();

        $response = $this->getJson(
            str_replace('{userId}', $anotherUser->getKey(), self::CONTROLLER_ROUTE),
            ['authorization' => 'Bearer ' . $this->getAccessTokenFromUser($user)]
        );

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Don\'t have permission to this resource', $decodedResponse['message']);
    }
}
