<?php

namespace Tests\Feature\Controller\Product;

use App\Models\Product;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Tests\Traits\UserTrait;

class ProductDeleteTest extends TestCase
{
    private const CONTROLLER_ROUTE = '/api/product';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        UserTrait::createAdminAuthorizedUser();
    }

    public function testDeleteProductSuccess(): void
    {
        $product = $this->createProduct();

        $response = $this->deleteJson(
            self::CONTROLLER_ROUTE . '/' . $product->getKey(),
            [],
            ['authorization' => 'Bearer ' . auth()->getToken()]
        );

        static::assertDatabaseEmpty($product);
        $response->assertStatus(Response::HTTP_OK);
        $decodedResponse = $response->decodeResponseJson();
        static::assertSame('Successfully deleted', $decodedResponse['message']);
    }

    public function testProductDeleteWithInvalidTokenShouldFail(): void
    {
        $invalidToken = 'eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjEifQ.ZAU547bnCcGrvSZiaDeYpbQg6rUopOe3HMJ01l2a2NQ';
        auth()->setToken($invalidToken);

        $product = $this->createProduct();

        $response = $this->deleteJson(
            self::CONTROLLER_ROUTE . '/' . $product->getKey(),
            [],
            ['authorization' => 'Bearer ' . auth()->getToken()]
        );

        $response->assertStatus(Response::HTTP_UNAUTHORIZED);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Token Signature could not be verified.', $decodedResponse['message']);
    }

    public function testProductDeleteWithNonExistentProductShouldFail(): void
    {
        $response = $this->deleteJson(
            self::CONTROLLER_ROUTE . '/' . rand(1000, 2000),
            [],
            ['authorization' => 'Bearer ' . auth()->getToken()]
        );

        $response->assertStatus(Response::HTTP_NOT_FOUND);
        $decodedResponse = $response->decodeResponseJson();

        static::assertArrayHasKey('message', $decodedResponse);
        static::assertSame('Resource is not exist', $decodedResponse['message']);
    }

    private function createProduct(): Product
    {
        return Product::factory()->createOne();
    }
}
