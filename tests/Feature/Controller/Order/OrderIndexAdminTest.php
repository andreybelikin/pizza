<?php

namespace Feature\Controller\Order;

use App\Dto\Request\ListOrderFilterData;
use Tests\TestCase;

class OrderIndexAdminTest extends TestCase
{
    private const CONTROLLER_ADMIN_ROUTE = 'api/admin/orders';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetFilteredOrdersByAdminSuccess(): void
    {
        $anotherUser = $this->getAnotherUser();
        $filters = new ListOrderFilterData(
            $anotherUser->id,
            'testTitle',
            35000,
            250000,
            'delivered',
            '24.03.2024'
        );
        $this->changeOrderProducts($anotherUser, $filters);
        $expectedOrders = $this->getFilteredOrders($filters);

        $filters = $this->addFilters((array)$filters);
        $response = $this->getJson(
            self::CONTROLLER_ADMIN_ROUTE . $filters,
            ['authorization' => 'Bearer ' . $this->getUserAccessToken($this->getAdminUser())]
        );

        $response->assertOk();
        $response->assertJson(json_decode($expectedOrders, true));
    }

    public function testGetOrdersWithEmptyFiltersByAdminSuccess(): void
    {
        $filters = new ListOrderFilterData(
            null,
            null,
            null,
            null,
            null,
            null
        );
        $expectedOrders = json_decode($this->getFilteredOrders($filters), true);

        $response = $this->getJson(
            self::CONTROLLER_ADMIN_ROUTE,
            ['authorization' => 'Bearer ' . $this->getUserAccessToken($this->getAdminUser())]
        );

        $response->assertOk();
        $response->assertJson($expectedOrders);
    }

    public function testGetFilteredOrdersByAdminWithInvalidTokenShouldFail(): void
    {
        $anotherUser = $this->getAnotherUser();
        $filters = new ListOrderFilterData(
            $anotherUser->id,
            'testTitle',
            35000,
            250000,
            'delivered',
            '24.03.2024'
        );

        $filters = $this->addFilters((array)$filters);
        $response = $this->getJson(
            self::CONTROLLER_ADMIN_ROUTE . $filters,
            ['authorization' => 'Bearer ' . $this->getInvalidToken()]
        );

        $response->assertUnauthorized();
    }

    private function addFilters(array $filters): string
    {
        $filtersParams = '?';
        foreach ($filters as $filterName => $filterValue) {
            $filtersParams .= sprintf('%s=%s&', $filterName, $filterValue);
        }

        return $filtersParams;
    }
}
