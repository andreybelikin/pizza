<?php

namespace Tests\Feature\Controller\Auth;

use Closure;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Testing\Assert;
use Illuminate\Testing\AssertableJsonString;
use Illuminate\Testing\TestResponse;
use PHPUnit\Framework\Attributes\DataProvider;
use Tests\TestCase;
use Tests\Traits\UserTrait;
use Tests\Traits\AuthTrait;

class RefreshTest extends TestCase
{
    use DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        UserTrait::createAdminAuthorizedUser();
    }

    #[DataProvider('refreshProvider')]
    public function testRefresh(Closure $createTokens, Closure $requestTokensAssertions, Closure $responseAssertions)
    {
        $requestTokens = $createTokens();
        $response = $this->postJson('/api/refresh', [], $requestTokens);
        $decodedResponse = $response->decodeResponseJson();

        $responseAssertions($response, $decodedResponse);
        $requestTokensAssertions($requestTokens);
    }

    public static function refreshProvider(): array
    {
        return [
            'refreshWithValidTokenShouldBlacklistRequestTokenAndReturnSuccessControllerResponse' => [
                function () {
                    $refreshToken = AuthTrait::generateRefreshToken();

                    return ['x-refresh-token' => $refreshToken];
                },
                function () {
                    Assert::assertEquals(1, count(DB::table('token_blacklist')->get()));
                },
                function (TestResponse $response, AssertableJsonString $decodedResponse) {
                    $response->assertStatus(Response::HTTP_OK);
                    Assert::assertArrayHasKey('accessToken', $decodedResponse);
                    Assert::assertArrayHasKey('refreshToken', $decodedResponse);
                },
            ],
            'refreshWithEmptyTokenShouldFail' => [
                function () {
                    return ['x-refresh-token' => ''];
                },
                function () {},
                function (TestResponse $response, AssertableJsonString $decodedResponse) {
                    $response->assertStatus(Response::HTTP_BAD_REQUEST);
                    Assert::assertArrayHasKey('message', $decodedResponse);
                    Assert::assertSame('Nor access or refresh token passed', $decodedResponse['message']);
                },
            ],
        ];
    }
}
