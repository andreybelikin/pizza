<?php

namespace Tests\Feature\Controller\Auth;

use PHPUnit\Framework\Attributes\DataProvider;
use Tests\TestCase;

class LoginTest extends TestCase
{
    private const USER_CONTROLLER_ROUTE = '/api/auth/login';
    private const ADMIN_CONTROLLER_ROUTE = '/api/admin/auth/login';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    #[DataProvider('contextDataProvider')]
    public function testLoginShouldSuccess(string $route): void
    {
        $credentials = [
            'email' => 'test2233@email.com',
            'password' => 'keK48!>O04780',
        ];
        $user = $this->createUserWithCredentials($credentials);

        $response = $this->postJson($route, $credentials);
        $accessToken = $response->decodeResponseJson()['accessToken'];
        $refreshToken = $response->decodeResponseJson()['refreshToken'];

        $response->assertOk();
        $tokenUser = auth()->setToken($accessToken)->authenticate();
        static::assertSame($user->id, $tokenUser->id);
        $tokenUser = auth()->setToken($refreshToken)->authenticate();
        static::assertSame($user->id, $tokenUser->id);
    }

    #[DataProvider('contextDataProvider')]
    public function testLoginWithInvalidCredentialsShouldFail(string $route): void
    {
        $credentials = [
            'email' => 2233,
            'password' => 'keK48!>O04780',
        ];
        $user = $this->createUserWithCredentials($credentials);
        $response = $this->postJson($route, $credentials);

        $response->assertUnprocessable();
    }

    #[DataProvider('contextDataProvider')]
    public function testLoginWithMismatchedCredentialsShouldFail(string $route): void
{
    $initialCredentials = [
            'email' => 'test2233@email.com',
            'password' => 'keK48!>O04780',
        ];
        $mismatchedCredentials = [
            'email' => 'test2233@email.RU',
            'password' => 'keK48!>O04780',
        ];
        $user = $this->createUserWithCredentials($initialCredentials);

        $response = $this->postJson($route, $mismatchedCredentials);

        $response->assertUnauthorized();
    }

    public static function contextDataProvider(): array
    {
        return [
            'user' => [
                'route' => self::USER_CONTROLLER_ROUTE,
            ],
            'admin' => [
                'route' => self::ADMIN_CONTROLLER_ROUTE,
            ]
        ];
    }
}
