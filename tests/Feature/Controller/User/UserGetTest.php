<?php

namespace Tests\Feature\Controller\User;

use Closure;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Testing\TestResponse;
use PHPUnit\Framework\Attributes\DataProvider;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Tests\Traits\UserTrait;

class UserGetTest extends TestCase
{
    use DatabaseTransactions;

    private const CONTROLLER_ROUTE = '/api/user/';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        UserTrait::createAdminAuthorizedUser();
    }

    public function testGetUserSuccess(): void
    {
        $user = auth()->user();

        $response = $this->getJson(
            self::CONTROLLER_ROUTE . $user->getKey(),
            ['authorization' => 'Bearer ' . auth()->getToken()]
        );

        $response->assertOk();
        $response->assertJson([
            'name' => $user->name,
            'surname' => $user->surname,
            'email' => $user->email,
            'phone' => $user->phone,
            'default_address' => $user->default_address,
        ]);
    }

    #[DataProvider('getUserFailedProvider')]
    public function testGetUserFailed(
        ?Closure $anotherUserId,
        ?string  $invalidToken,
        Closure  $assertions,
    ): void {
        $userId = $anotherUserId ? $anotherUserId() : auth()->user()->getKey();
        $accessToken = $invalidToken ?? auth()->getToken();

        $response = $this->getJson(
            self::CONTROLLER_ROUTE . $userId,
            ['authorization' => 'Bearer ' . $accessToken]
        );

        $assertions($response);
    }

    public static function getUserFailedProvider(): array
    {
        return [
            'getNonExistentUserShouldFail' => [
                'anotherUserId' => fn () => 10000,
                'invalidToken' => null,
                'assertions' => function (TestResponse $response) {
                    $response->assertStatus(Response::HTTP_NOT_FOUND);
                    $decodedResponse = $response->decodeResponseJson();

                    static::assertArrayHasKey('message', $decodedResponse);
                    static::assertSame('Resource is not exist', $decodedResponse['message']);
                },
            ],
            'getAnotherUserShouldFail' => [
                'anotherUserId' => fn() => UserTrait::getAnotherUser()->getKey(),
                'invalidToken' => null,
                'assertions' => function (TestResponse $response) {
                    $response->assertStatus(Response::HTTP_UNAUTHORIZED);
                    $decodedResponse = $response->decodeResponseJson();

                    static::assertArrayHasKey('message', $decodedResponse);
                    static::assertSame('Don\'t have permission to this resource', $decodedResponse['message']);
                },
            ],
            'getRequestWithInvalidTokenShouldFail' => [
                'anotherUserId' => null,
                'invalidToken' => 'eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjEifQ.ZAU547bnCcGrvSZiaDeYpbQg6rUopOe3HMJ01l2a2NQ',
                'assertions' => function (TestResponse $response) {
                    $response->assertStatus(Response::HTTP_UNAUTHORIZED);
                    $decodedResponse = $response->decodeResponseJson();

                    static::assertArrayHasKey('message', $decodedResponse);
                    static::assertSame('Token Signature could not be verified.', $decodedResponse['message']);
                },
            ],
        ];
    }
}
